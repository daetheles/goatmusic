#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API GoatMusic
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
from urllib.parse import urljoin

BASE_URL = "http://localhost:5000"

def test_endpoint(endpoint, method="GET", data=None, expected_status=200):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint"""
    url = urljoin(BASE_URL, endpoint)
    
    try:
        if method == "GET":
            response = requests.get(url)
        elif method == "POST":
            response = requests.post(url, json=data)
        elif method == "PUT":
            response = requests.put(url, json=data)
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            return False
        
        if response.status_code == expected_status:
            print(f"‚úÖ {method} {endpoint} - {response.status_code}")
            return True
        else:
            print(f"‚ùå {method} {endpoint} - –û–∂–∏–¥–∞–ª—Å—è {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
            if response.text:
                try:
                    error_data = response.json()
                    print(f"   –û—à–∏–±–∫–∞: {error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}...")
            return False
            
    except requests.exceptions.ConnectionError:
        print(f"‚ùå {method} {endpoint} - –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return False
    except Exception as e:
        print(f"‚ùå {method} {endpoint} - –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API GoatMusic")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints:")
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    test_endpoint("/", "GET", expected_status=200)
    
    # –õ–æ–≥–∏–Ω (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ Spotify)
    test_endpoint("/login", "GET", expected_status=302)
    
    # –õ–æ–≥–∞—É—Ç (–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é)
    test_endpoint("/logout", "GET", expected_status=302)
    
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints (–¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å 401):")
    
    # API endpoints (–¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
    protected_endpoints = [
        "/api/profile",
        "/api/playlists", 
        "/api/search",
        "/api/currently-playing",
        "/api/recently-played",
        "/api/liked-tracks",
        "/api/recommendations"
    ]
    
    for endpoint in protected_endpoints:
        test_endpoint(endpoint, "GET", expected_status=401)
    
    print("\nüéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º:")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (–¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
    playback_endpoints = [
        ("/api/play", "PUT", {"uri": "spotify:track:test"}),
        ("/api/pause", "PUT", None),
        ("/api/next", "POST", None),
        ("/api/previous", "POST", None),
        ("/api/volume", "PUT", {"volume": 50}),
        ("/api/shuffle", "PUT", {"state": True}),
        ("/api/repeat", "PUT", {"state": "off"})
    ]
    
    for endpoint, method, data in playback_endpoints:
        if data:
            test_endpoint(endpoint, method, data, expected_status=401)
        else:
            test_endpoint(endpoint, method, None, expected_status=401)
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
    print("   2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Spotify")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ README.md")

if __name__ == "__main__":
    main()
